using System;
using System.Text;
using System.IO;


namespace WordSend
{
    public class WriteBrowserBibleModule
    {

        public WriteBrowserBibleModule()
        {
        }

        public global globe;
        public string certified;

        // public haiolaForm hf = haiolaForm.MasterInstance;
        private CreateIndex ci;

        public void WriteTheModule()
        {
            string about;   // licenseHtml or contents of about.inc in input project directory
            if (String.IsNullOrEmpty(globe.projectOptions.fcbhId))
                return;
            int i;
            if ((globe.projectOptions.languageId.Length < 3) ||
                (globe.projectOptions.translationId.Length < 3))
                return;
            string UsfxPath = Path.Combine(globe.outputProjectDirectory, "usfx");
            string browserBiblePath = Path.Combine(globe.outputProjectDirectory, "browserBible");
            string browserBibleCssFileName;
            if (globe.projectOptions.commonChars)
            {
                browserBibleCssFileName = "latin.css";
            }
            else
            {
                browserBibleCssFileName = globe.projectOptions.customCssFileName;
            }
            Utils.EnsureDirectory(browserBiblePath);
            if (String.IsNullOrEmpty(globe.projectOptions.fcbhId))
            {
                Logit.WriteError("Missing FCBHID for " + globe.projectOptions.translationId);
                globe.projectOptions.fcbhId = globe.projectOptions.translationId;
            }



            if (!Directory.Exists(UsfxPath))
            {
                Logit.WriteError("ERROR: "+UsfxPath + " not found!");
                return;
            }
            if (Directory.Exists(browserBiblePath))
            {   // Delete any old files in this directory.
                Utils.DeleteDirectory(browserBiblePath);
            }
            Utils.EnsureDirectory(browserBiblePath);
            string browserBibleCss = Path.Combine(browserBiblePath, browserBibleCssFileName);

            Utils.DeleteFile(browserBibleCss);
            // Always get the browser Bible CSS file from BibleConv/browserBiblecss/ with the same file name as the current custom CSS file name used for simple HTML.
            string browserBiblecssDir = Path.Combine(globe.dataRootDir, "browserBiblecss");
            string specialCss = Path.Combine(browserBiblecssDir, browserBibleCssFileName);
            if (File.Exists(specialCss))
            {
                File.Copy(specialCss, browserBibleCss);
            }
            string fallbackCss = Path.Combine(browserBiblecssDir, "fallback.css");
            if (File.Exists(fallbackCss))
            {
                File.Copy(fallbackCss, Path.Combine(browserBiblePath, "fallback.css"));
            }
            string aboutFile = Path.Combine(globe.inputProjectDirectory, "about.inc");
            if (File.Exists(aboutFile))
            {
                StreamReader sr = new StreamReader(aboutFile);
                about = globe.expandPercentEscapes(sr.ReadToEnd());
                sr.Close();
            }
            else
            {
                about = globe.copyrightPermissionsStatement();
            }



            string sqlDir = Path.Combine(globe.outputProjectDirectory, "sql");
            Utils.EnsureDirectory(sqlDir);
            usfx2BrowserBible toBrowserBible;
            toBrowserBible = new usfx2BrowserBible();
            toBrowserBible.projectOptions = globe.projectOptions;
            toBrowserBible.projectOutputDir = globe.outputProjectDirectory;
            toBrowserBible.stripPictures = true;
            DateTime srcDate = globe.sourceDate;   // Bring local to avoid potential exception in marshall-by-reference class
            toBrowserBible.indexDateStamp = "This module was generated by <a href='http://eBible.org'>eBible.org</a> on " + DateTime.UtcNow.ToString("d MMM yyyy") +
            " from source files dated " + srcDate.ToString("d MMM yyyy" + ".");

            if (!String.IsNullOrEmpty(certified))
            {
                StreamReader sr = new StreamReader("/share/Documents/Electronic Scripture Publishing/ebible_certified_sm.b64");
                string cert = sr.ReadToEnd();
                sr.Close();
                File.Copy(certified, Path.Combine(browserBiblePath, "eBible.org_certified.jpg"));
                toBrowserBible.indexDateStamp = String.Format("{0}<br /><a href='http://eBible.org/certified/' target='_blank'><img src='data:image/png;base64,{1}'>",
                    toBrowserBible.indexDateStamp, cert);
            }
            toBrowserBible.CrossRefToFilePrefixMap = globe.projectOptions.CrossRefToFilePrefixMap;
            string usfxFilePath = Path.Combine(UsfxPath, "usfx.xml");
            string orderFile = Path.Combine(globe.inputProjectDirectory, "bookorder.txt");
            if (!File.Exists(orderFile))
                orderFile = SFConverter.FindAuxFile("bookorder.txt");
            StringBuilder localNumbers = new StringBuilder("\"numbers\":[");
            for (i = 0; i < 150; i++)
            {
                localNumbers.Append("\""+fileHelper.LocalizeDigits(i.ToString())+"\",");
            }
            localNumbers.Append("\"" + fileHelper.LocalizeDigits("150") + "\"],");
            toBrowserBible.country = globe.projectOptions.country;
            toBrowserBible.countryCode = globe.projectOptions.countryCode;
            toBrowserBible.bookInfo.ReadPublicationOrder(orderFile);
            toBrowserBible.MergeXref(Path.Combine(globe.inputProjectDirectory, "xref.xml"));
            toBrowserBible.sourceLink = globe.expandPercentEscapes("<a href=\"http://%h/%t\">%v</a>");
            toBrowserBible.textDirection = globe.projectOptions.textDir;
            toBrowserBible.languageNameInEnglish = globe.projectOptions.languageNameInEnglish;
            toBrowserBible.languageNameInVernacular = globe.projectOptions.languageName;
            toBrowserBible.traditionalAbbreviation = globe.projectOptions.translationTraditionalAbbreviation;
            toBrowserBible.englishDescription = globe.projectOptions.EnglishDescription;
            toBrowserBible.customCssName = browserBibleCssFileName;
            toBrowserBible.numbers = localNumbers.ToString();
            toBrowserBible.fcbhAudioNt = globe.projectOptions.fcbhAudioNT;
            toBrowserBible.fcbhAudioOt = globe.projectOptions.fcbhAudioOT;
            toBrowserBible.fcbhDramaNt = globe.projectOptions.fcbhDramaNT;
            toBrowserBible.fcbhDramaOt = globe.projectOptions.fcbhDramaOT;
            toBrowserBible.fcbhPortion = globe.projectOptions.fcbhAudioPortion;
            toBrowserBible.coverName = Path.GetFileName(globe.preferredCover);
            string coverPath = Path.Combine(browserBiblePath, toBrowserBible.coverName);
            File.Copy(globe.preferredCover, coverPath, true);
            string covertnpng = Path.Combine(browserBiblePath, "covertn.png");
            string covertnb64 = Path.Combine(browserBiblePath, "covertn.b64");
            fileHelper.RunCommand("shrinkcover", String.Format("{0} {1} {2}", coverPath, covertnpng, covertnb64), "");
            toBrowserBible.b64CoverName = covertnb64;
            if ((globe.er != null) && (globe.er.countries != null))
                toBrowserBible.countries = globe.er.countries;
            if (globe.projectOptions.commonChars)
            {
                toBrowserBible.preferredFont = "latin";
            }
            else
            {
                toBrowserBible.preferredFont = globe.projectOptions.fontFamily;
            }
            toBrowserBible.shortTitle = globe.projectOptions.shortTitle;
            toBrowserBible.fcbhId = globe.projectOptions.fcbhId;
            toBrowserBible.dialectCode = globe.projectOptions.languageId + globe.projectOptions.dialect + globe.projectOptions.script;
            toBrowserBible.script = globe.projectOptions.script;
            string sqlTranslationId = globe.projectOptions.translationId.Replace("-", "_");
            toBrowserBible.sqlTableName = sqlTranslationId + "_isvl";
            toBrowserBible.sqlFileName = Path.Combine(Path.Combine(globe.outputProjectDirectory, "sql"), globe.projectOptions.translationId + "_isvl.sql");
            toBrowserBible.langCodes = globe.languageCodes;
            toBrowserBible.xrefCall.SetMarkers(globe.projectOptions.xrefCallers);
            toBrowserBible.footNoteCall.SetMarkers(globe.projectOptions.footNoteCallers);
            toBrowserBible.redistributable = globe.projectOptions.redistributable;
            toBrowserBible.projectInputDir = globe.inputProjectDirectory;
            toBrowserBible.ConvertUsfxToHtml(usfxFilePath, browserBiblePath,
                globe.projectOptions.vernacularTitle,
                globe.projectOptions.languageId,
                globe.projectOptions.translationId,
                globe.projectOptions.chapterLabel,
                globe.projectOptions.psalmLabel,
                "<a href='copyright.htm'>" + usfxToHtmlConverter.EscapeHtml(globe.shortCopyrightMessage) + "</a>",
                globe.expandPercentEscapes(globe.projectOptions.homeLink),
                globe.expandPercentEscapes(globe.projectOptions.footerHtml),
                globe.expandPercentEscapes(globe.projectOptions.indexHtml),
                about,
                globe.projectOptions.ignoreExtras,
                globe.projectOptions.goText);
            ci = new CreateIndex();
            ci.MakeJsonIndex(Path.Combine(Path.Combine(globe.outputProjectDirectory, "search"), "verseText.xml"), Path.Combine(browserBiblePath, "index"),
                Path.Combine(sqlDir, sqlTranslationId + "_conc.sql"));
            ci.MakeLemmaIndex(Path.Combine(Path.Combine(globe.outputProjectDirectory, "search"), "verseText.lemma"), Path.Combine(browserBiblePath, "indexlemma"));
            string fontsDir = Path.Combine(browserBiblePath, "fonts");
            fileHelper.EnsureDirectory(fontsDir);
            string fontSource = Path.Combine(globe.dataRootDir, "fonts");
            string fontName = globe.projectOptions.fontFamily.ToLower().Replace(' ', '_');
            fileHelper.CopyFile(Path.Combine(fontSource, fontName + ".ttf"), Path.Combine(fontsDir, fontName + ".ttf"));
            fileHelper.CopyFile(Path.Combine(fontSource, fontName + ".woff"), Path.Combine(fontsDir, fontName + ".woff"));
            fileHelper.CopyFile(Path.Combine(fontSource, fontName + ".eot"), Path.Combine(fontsDir, fontName + ".eot"));
            Utils.DeleteFile(covertnpng);
            Utils.DeleteFile(covertnb64);
            Logit.CloseFile();
            if (Logit.loggedError)
            {
                globe.projectOptions.lastRunResult = false;
            }
            if (Logit.loggedWarning)
            {
                globe.projectOptions.warningsFound = true;
            }
        }
    }
}
